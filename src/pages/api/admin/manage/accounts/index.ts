import { authAdmin } from "@/firebase/adminApp";
import { apiConfig } from "@/lib/api/apiConfig";
import { NextApiRequest, NextApiResponse } from "next";

/**---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * ~  █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗        █████╗  ██████╗ ██████╗ ██████╗ ██╗   ██╗███╗   ██╗████████╗    ███████╗███╗   ██╗██████╗ ██████╗  ██████╗ ██╗███╗   ██╗████████╗
 * ~ ██╔══██╗██╔══██╗████╗ ████║██║████╗  ██║██╗    ██╔══██╗██╔════╝██╔════╝██╔═══██╗██║   ██║████╗  ██║╚══██╔══╝    ██╔════╝████╗  ██║██╔══██╗██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝
 * ~ ███████║██║  ██║██╔████╔██║██║██╔██╗ ██║╚═╝    ███████║██║     ██║     ██║   ██║██║   ██║██╔██╗ ██║   ██║       █████╗  ██╔██╗ ██║██║  ██║██████╔╝██║   ██║██║██╔██╗ ██║   ██║
 * ~ ██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║██╗    ██╔══██║██║     ██║     ██║   ██║██║   ██║██║╚██╗██║   ██║       ██╔══╝  ██║╚██╗██║██║  ██║██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║
 * ~ ██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║╚═╝    ██║  ██║╚██████╗╚██████╗╚██████╔╝╚██████╔╝██║ ╚████║   ██║       ███████╗██║ ╚████║██████╔╝██║     ╚██████╔╝██║██║ ╚████║   ██║
 * ~ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝       ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝       ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝
 *
 * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 *
 *
 * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 */
/**
 *
 * @param {NextApiRequest} req
 * @param {NextApiResponse} res
 *
 */
export default async function handler(
	req: NextApiRequest,
	res: NextApiResponse
) {
	try {
		const { email, password, privateKey, userId } = req.body || req.query;

		if (!privateKey || privateKey !== apiConfig.privateKey) {
			return res.status(401).json({ error: "Unauthorized!" });
		}

		switch (req.method) {
			/**-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 * *  █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗        ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗     █████╗  ██████╗ ██████╗ ██████╗ ██╗   ██╗███╗   ██╗████████╗
			 * * ██╔══██╗██╔══██╗████╗ ████║██║████╗  ██║██╗    ██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ██╔══██╗██╔════╝██╔════╝██╔═══██╗██║   ██║████╗  ██║╚══██╔══╝
			 * * ███████║██║  ██║██╔████╔██║██║██╔██╗ ██║╚═╝    ██║     ██████╔╝█████╗  ███████║   ██║   █████╗      ███████║██║     ██║     ██║   ██║██║   ██║██╔██╗ ██║   ██║
			 * * ██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║██╗    ██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝      ██╔══██║██║     ██║     ██║   ██║██║   ██║██║╚██╗██║   ██║
			 * * ██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║╚═╝    ╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗    ██║  ██║╚██████╗╚██████╗╚██████╔╝╚██████╔╝██║ ╚████║   ██║
			 * * ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝        ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 *
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 */
			case "POST": {
				// Create a new user in the Firebase Authentication service.

				if (!email || !password) {
					return res
						.status(400)
						.json({ message: "Email and password are required" });
					return;
				}

				await authAdmin
					.createUser({
						email: email,
						password: password,
					})
					.then((user) => {
						return res.status(200).json({
							message: "Account created successfully",
							userId: user.uid,
						});
					})
					.catch((error) => {
						return res.status(500).json({
							message: "Error creating account",
							error: error.message,
						});
						return;
					});
				break;
			}

			/**-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 * !  █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗       ██████╗ ███████╗██╗     ███████╗████████╗███████╗     █████╗  ██████╗ ██████╗ ██████╗ ██╗   ██╗███╗   ██╗████████╗
			 * ! ██╔══██╗██╔══██╗████╗ ████║██║████╗  ██║██╗    ██╔══██╗██╔════╝██║     ██╔════╝╚══██╔══╝██╔════╝    ██╔══██╗██╔════╝██╔════╝██╔═══██╗██║   ██║████╗  ██║╚══██╔══╝
			 * ! ███████║██║  ██║██╔████╔██║██║██╔██╗ ██║╚═╝    ██║  ██║█████╗  ██║     █████╗     ██║   █████╗      ███████║██║     ██║     ██║   ██║██║   ██║██╔██╗ ██║   ██║
			 * ! ██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║██╗    ██║  ██║██╔══╝  ██║     ██╔══╝     ██║   ██╔══╝      ██╔══██║██║     ██║     ██║   ██║██║   ██║██║╚██╗██║   ██║
			 * ! ██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║╚═╝    ██████╔╝███████╗███████╗███████╗   ██║   ███████╗    ██║  ██║╚██████╗╚██████╗╚██████╔╝╚██████╔╝██║ ╚████║   ██║
			 * ! ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝       ╚═════╝ ╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝    ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 *
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 */
			case "DELETE": {
				// Delete a user from the Firebase Authentication service.

				if (!userId) {
					return res.status(400).json({ message: "User ID is required" });
					return;
				}

				authAdmin.deleteUser(userId).catch((error) => {
					return res.status(500).json({
						message: "Error deleting account",
						error: error.message,
						isDeleted: false,
					});
					return;
				});

				return res.status(200).json({
					message: "Account deleted successfully",
					isDeleted: true,
				});

				break;
			}

			/**-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 * & ██████╗ ███████╗███████╗ █████╗ ██╗   ██╗██╗  ████████╗
			 * & ██╔══██╗██╔════╝██╔════╝██╔══██╗██║   ██║██║  ╚══██╔══╝
			 * & ██║  ██║█████╗  █████╗  ███████║██║   ██║██║     ██║
			 * & ██║  ██║██╔══╝  ██╔══╝  ██╔══██║██║   ██║██║     ██║
			 * & ██████╔╝███████╗██║     ██║  ██║╚██████╔╝███████╗██║
			 * & ╚═════╝ ╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 *
			 *
			 * -----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 */
			default: {
				return res.status(405).json({ message: "Method not allowed" });
				return;
			}
		}
	} catch (error: any) {
		return res.status(500).json({ error: error.message });
		return;
	}
}
