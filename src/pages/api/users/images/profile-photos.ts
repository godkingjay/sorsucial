import { clientStorage } from "@/firebase/clientApp";
import userDb from "@/lib/db/userDb";
import { deleteObject, ref } from "firebase/storage";
import { NextApiRequest, NextApiResponse } from "next";

/**----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * ~ ██████╗ ██████╗  ██████╗ ███████╗██╗██╗     ███████╗    ██████╗ ██╗  ██╗ ██████╗ ████████╗ ██████╗ ███████╗    ███████╗███╗   ██╗██████╗ ██████╗  ██████╗ ██╗███╗   ██╗████████╗
 * ~ ██╔══██╗██╔══██╗██╔═══██╗██╔════╝██║██║     ██╔════╝    ██╔══██╗██║  ██║██╔═══██╗╚══██╔══╝██╔═══██╗██╔════╝    ██╔════╝████╗  ██║██╔══██╗██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝
 * ~ ██████╔╝██████╔╝██║   ██║█████╗  ██║██║     █████╗      ██████╔╝███████║██║   ██║   ██║   ██║   ██║███████╗    █████╗  ██╔██╗ ██║██║  ██║██████╔╝██║   ██║██║██╔██╗ ██║   ██║
 * ~ ██╔═══╝ ██╔══██╗██║   ██║██╔══╝  ██║██║     ██╔══╝      ██╔═══╝ ██╔══██║██║   ██║   ██║   ██║   ██║╚════██║    ██╔══╝  ██║╚██╗██║██║  ██║██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║
 * ~ ██║     ██║  ██║╚██████╔╝██║     ██║███████╗███████╗    ██║     ██║  ██║╚██████╔╝   ██║   ╚██████╔╝███████║    ███████╗██║ ╚████║██████╔╝██║     ╚██████╔╝██║██║ ╚████║   ██║
 * ~ ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝╚══════╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝ ╚══════╝    ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝
 *
 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 *
 *
 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 */
/**
 *
 * @param {NextApiRequest} req
 * @param {NextApiResponse} res
 *
 *
 */
export default async function handler(
	req: NextApiRequest,
	res: NextApiResponse
) {
	try {
		const { userProfilePhotosCollection } = await userDb();

		switch (req.method) {
			/**----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 * ! ██████╗ ███████╗██╗     ███████╗████████╗███████╗    ██████╗ ██████╗  ██████╗ ███████╗██╗██╗     ███████╗    ██████╗ ██╗  ██╗ ██████╗ ████████╗ ██████╗ ███████╗
			 * ! ██╔══██╗██╔════╝██║     ██╔════╝╚══██╔══╝██╔════╝    ██╔══██╗██╔══██╗██╔═══██╗██╔════╝██║██║     ██╔════╝    ██╔══██╗██║  ██║██╔═══██╗╚══██╔══╝██╔═══██╗██╔════╝
			 * ! ██║  ██║█████╗  ██║     █████╗     ██║   █████╗      ██████╔╝██████╔╝██║   ██║█████╗  ██║██║     █████╗      ██████╔╝███████║██║   ██║   ██║   ██║   ██║███████╗
			 * ! ██║  ██║██╔══╝  ██║     ██╔══╝     ██║   ██╔══╝      ██╔═══╝ ██╔══██╗██║   ██║██╔══╝  ██║██║     ██╔══╝      ██╔═══╝ ██╔══██║██║   ██║   ██║   ██║   ██║╚════██║
			 * ! ██████╔╝███████╗███████╗███████╗   ██║   ███████╗    ██║     ██║  ██║╚██████╔╝██║     ██║███████╗███████╗    ██║     ██║  ██║╚██████╔╝   ██║   ╚██████╔╝███████║
			 * ! ╚═════╝ ╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝╚══════╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝ ╚══════╝
			 *
			 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 *
			 *
			 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 */
			case "DELETE": {
				const { deleteUserId } = req.body;

				if (!deleteUserId) {
					return res.status(500).json({ error: "No user id provided" });
				}

				const deleteProfilePhotos = await userProfilePhotosCollection
					.find({
						userId: deleteUserId,
					})
					.toArray();

				if (deleteProfilePhotos.length === 0) {
					return res.status(200).json({
						deleteProfilePhotoState: "No profile photos found",
						deleteUserId,
						isDeleted: true,
					});
				}

				await Promise.all(
					deleteProfilePhotos.map(async (profilePhoto) => {
						const imageStorageRef = ref(clientStorage, profilePhoto.filePath);

						await deleteObject(imageStorageRef).then(async () => {
							await userProfilePhotosCollection.deleteOne({
								id: profilePhoto.id,
							});
						});
					})
				)
					.then(() => {
						return res.status(200).json({
							deleteProfilePhotoState: "Profile photos deleted",
							deleteUserId,
							isDeleted: true,
						});
					})
					.catch((err) => {
						return res.status(500).json({ error: err, isDeleted: false });
					});

				break;
			}

			/**----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 * & ██████╗ ███████╗███████╗ █████╗ ██╗   ██╗██╗  ████████╗
			 * & ██╔══██╗██╔════╝██╔════╝██╔══██╗██║   ██║██║  ╚══██╔══╝
			 * & ██║  ██║█████╗  █████╗  ███████║██║   ██║██║     ██║
			 * & ██║  ██║██╔══╝  ██╔══╝  ██╔══██║██║   ██║██║     ██║
			 * & ██████╔╝███████╗██║     ██║  ██║╚██████╔╝███████╗██║
			 * & ╚═════╝ ╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝
			 *
			 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 *
			 *
			 *
			 * ----------------------------------------------------------------------------------------------------------------------------------------------------------------
			 */
			default: {
				return res.status(500).json({ error: "No method provided" });
			}
		}
	} catch (error: any) {
		return res.status(500).json({ message: error.message });
	}
}
